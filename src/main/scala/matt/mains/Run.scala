package matt.mains
import java.util

import matt.POI

import org.apache.spark.sql.SparkSession
import matt.definitions.GridIndexer
import org.locationtech.jts.geom.{GeometryFactory, PrecisionModel}
import matt.definitions.TableDefs
import matt.definitions.Generic
import org.apache.hadoop.conf.Configuration
import org.apache.log4j.Logger
import org.apache.log4j.Level
import org.apache.spark.storage.StorageLevel


object Run {
 def main(args: Array[String]) {
  System.out.println("******START-------------------------------------------------------------------------------------------------")
  ///////Param & Config
  //////////////////////////
  Logger.getLogger("org").setLevel(Level.OFF)
  val spark = SparkSession
    .builder
  //    .master("local[*]")
    .appName("Simple Application")
    .config("spark.dynamicAllocation.minExecutors", "25")
    .config("spark.dynamicAllocation.executorIdleTimeout", "50000s")
    .config("spark.driver.port", "51810")
    .config("spark.fileserver.port", "51811")
    .config("spark.broadcast.port", "51812")
    .config("spark.replClassServer.port", "51813")
    .config("spark.blockManager.port", "51814")
    .config("spark.executor.port", "51815")
    .config("spark.network.timeout", "600000s")
    .config("spark.executor.heartbeatInterval", "100000s")
    .config("spark.shuffle.blockTransferService", "nio")
    .config("spark.worker.cleanup.enabled", "true")
    .getOrCreate()
  val hadoopConfig: Configuration = spark.sparkContext.hadoopConfiguration
  hadoopConfig.set("fs.hdfs.impl", classOf[org.apache.hadoop.hdfs.DistributedFileSystem].getName)
  hadoopConfig.set("fs.file.impl", classOf[org.apache.hadoop.fs.LocalFileSystem].getName)
  val poiInputFile1 = "~/osmpois-planet-cleaned.csv";
  val poiInputFile = "/home/hamid/osmpois-planet-cleaned" + ".csv";

  val topk = args(0).toInt;
  val eps = args(1).toDouble
  val cores = args(2).toInt
  val algo=args(3).toInt
  val base=args(4).toInt
  var Kprime=args(5).toInt
  var shift=args(6).toDouble
  //if(algo==4)


  //////end Param & config
  //////////////////////////////////////

  //////Read and split CSV coordination to (nodeNumber, POI) (assign poi to each worker)
  ///////////////////////////////////////////////////////////////

  val inputData = spark.read.format("csv").option("header", "true").option("delimiter", ";").schema(TableDefs.customSchema2).load("hdfs:///input5.csv").drop().filter(x => (x.getAs[Double]("longtitude") != null && x.getAs[Double]("latitude") != null))
  //  .filter(x => (x.getAs[Double]("longtitude") > -10 && x.getAs[Double]("longtitude") < 35)).filter(x => (x.getAs[Double]("latitude") > 35 && x.getAs[Double]("latitude") < 80))//.filter(x => (x.getAs[Double]("longtitude")> -0.489 && x.getAs[Double]("longtitude")< 0.236)).filter(x => (x.getAs[Double]("latitude")> 51.28 && x.getAs[Double]("latitude")< 51.686));//;
  //var inputData = spark.read.format("csv").option("header", "true").option("delimiter", ";").schema(TableDefs.customSchema2).load(poiInputFile).drop().filter(x => (x.getAs[Double]("longtitude") != null && x.getAs[Double]("latitude") != null))//.filter(x => (x.getAs[Double]("longtitude") > -10 && x.getAs[Double]("longtitude") < 35)).filter(x => (x.getAs[Double]("latitude") > 35 && x.getAs[Double]("latitude") < 80))//.filter(x => (x.getAs[Double]("longtitude") > -0.489 && x.getAs[Double]("longtitude") < 0.236)).filter(x => (x.getAs[Double]("latitude") > 51.28 && x.getAs[Double]("latitude") < 51.686));
   //  .filter(x => (x.getAs[Double]("longtitude") > -10 && x.getAs[Double]("longtitude") < 35)).filter(x => (x.getAs[Double]("latitude") > 35 && x.getAs[Double]("latitude") < 80))
  val minLong = inputData.select("longtitude").reduce((x, y) => if (x.getAs[Double]("longtitude") < y.getAs[Double]("longtitude")) x else y).getAs[Double](0)
  val maxLong = inputData.select("longtitude").reduce((x, y) => if (x.getAs[Double]("longtitude") > y.getAs[Double]("longtitude")) x else y).getAs[Double](0)
  val minLat = inputData.select("latitude").reduce((x, y) => if (x.getAs[Double]("latitude") < y.getAs[Double]("latitude")) x else y).getAs[Double](0)
  val maxLat = inputData.select("latitude").reduce((x, y) => if (x.getAs[Double]("latitude") > y.getAs[Double]("latitude")) x else y).getAs[Double](0)

  val minmaxLong = (minLong - eps / shift, maxLong + eps/shift);
  println("minmaxLONG: " + minmaxLong);
  val minmaxLat = (minLat - eps / shift, maxLat + eps/shift);
  println("minmaxLat: " + minmaxLat);
  println("topK: " + topk );
  println("eps: " + eps );
  println("part#: " + cores );
  println("algo: " + algo );
  println("base: " + base );
  println("k': " + Kprime );
  println("shift': " + shift );



  // find to which node does each point belongs to : (NodeNo,Row)
  val width = math.sqrt(cores).toInt
  val gridIndexer = new GridIndexer(width, eps, minmaxLong, minmaxLat)
  println("partition per cell:" + gridIndexer.gridSizePerCell)
  val geometryFactory = new GeometryFactory(new PrecisionModel(), 4326);


  ///////Start
  //////////////////////////////

  if (algo==0) {
    val nodeToPoint = inputData.rdd.flatMap(x => Generic.poiToKeyValue(x, geometryFactory, gridIndexer));
    nodeToPoint.persist(StorageLevel.MEMORY_AND_DISK);
   val t = System.nanoTime()
   matt.distrib.NstepAlgo.Run(nodeToPoint, eps, topk,Kprime, gridIndexer,base);
   println("Nstep:::       time:" + (System.nanoTime() - t) / 1000000000 + "s          eps:" + eps + "       topk:" + topk + "     cores:" + cores)
   println("-----------------------------------------------------------------------------------------------------------------------------")
   println("-----------------------------------------------------------------------------------------------------------------------------")
  }
  if (algo==1) {
    val nodeToPoint = inputData.rdd.flatMap(x => Generic.poiToKeyValue(x, geometryFactory, gridIndexer));
    nodeToPoint.persist(StorageLevel.MEMORY_AND_DISK);
   val t = System.nanoTime()
   println("sigma 0.9")
   matt.distrib.NstepAlgoApp.Run(nodeToPoint, eps, topk, 0.9, gridIndexer);
   println("sigma 0.7")
   matt.distrib.NstepAlgoApp.Run(nodeToPoint, eps, topk, 0.7, gridIndexer);
   println("sigma 0.5")
   matt.distrib.NstepAlgoApp.Run(nodeToPoint, eps, topk, 0.5, gridIndexer);
   println("NstepApp:::       time:" + (System.nanoTime() - t) / 1000000000 + "s          eps:" + eps + "       topk:" + topk + "     cores:" + cores)
   println("-----------------------------------------------------------------------------------------------------------------------------")
   println("-----------------------------------------------------------------------------------------------------------------------------")
  }
  if (algo==2) {
   val t = System.nanoTime()
   val nodeOptToPoint = inputData.rdd.flatMap(x => Generic.poiOptToKeyValue(x, geometryFactory, gridIndexer));
    nodeOptToPoint.persist(StorageLevel.MEMORY_AND_DISK);

    matt.distrib.OnestepAlgoOptimized.Run(nodeOptToPoint, eps,  topk, gridIndexer,base,1)
   println("SingleOpt1(Dim):::       time:" + (System.nanoTime() - t) / 1000000000 + "s          eps:" + eps + "       topk:" + topk + "     cores:" + cores)
   println("-----------------------------------------------------------------------------------------------------------------------------")
   println("-----------------------------------------------------------------------------------------------------------------------------")
  }
  if (algo==3) {
    val nodeToPoint = inputData.rdd.flatMap(x => Generic.poiToKeyValue(x, geometryFactory, gridIndexer));
    nodeToPoint.persist(StorageLevel.MEMORY_AND_DISK);
   var t = System.nanoTime()
   matt.distrib.OnestepAlgoReduce.Run(nodeToPoint, eps, topk, gridIndexer,base);
   println("Single:::       time:" + (System.nanoTime() - t) / 1000000000 + "s          eps:" + eps + "       topk:" + topk + "     cores:" + cores)
   println("-----------------------------------------------------------------------------------------------------------------------------")
   println("-----------------------------------------------------------------------------------------------------------------------------")
  }

  if (algo==4) {
    val nodeToPoint = inputData.rdd.flatMap(x => Generic.poiToKeyValue(x, geometryFactory, gridIndexer));
    nodeToPoint.persist(StorageLevel.MEMORY_AND_DISK);
   var t = System.nanoTime()
   matt.distrib.OnestepAlgoReduceHybrid.Run(nodeToPoint, eps, topk, gridIndexer,base,Kprime);
   println("SingleHybrid:::       time:" + (System.nanoTime() - t) / 1000000000 + "s          eps:" + eps + "       topk:" + topk + "     cores:" + cores)
   println("-----------------------------------------------------------------------------------------------------------------------------")
   println("-----------------------------------------------------------------------------------------------------------------------------")
  }
  if (algo==5) {
   val t = System.nanoTime()
   val nodeOptToPoint = inputData.rdd.flatMap(x => Generic.poiOptToKeyValue(x, geometryFactory, gridIndexer));
    nodeOptToPoint.persist(StorageLevel.MEMORY_AND_DISK);

    matt.distrib.OnestepAlgoOptimized.Run(nodeOptToPoint, eps,  topk, gridIndexer,base,2)
   println("SingleOpt2:::       time:" + (System.nanoTime() - t) / 1000000000 + "s          eps:" + eps + "       topk:" + topk + "     cores:" + cores)
   println("-----------------------------------------------------------------------------------------------------------------------------")
   println("-----------------------------------------------------------------------------------------------------------------------------")
  }
  spark.stop()
 };

 def mergeStat(input: Iterable[POI]): Int = {
  val temp = new util.HashMap[String, POI]
  for (poi <- input) {
   val x = poi.getPoint.getX
   val y = poi.getPoint.getY
   if (temp.containsValue(x + ":" + y)) temp.get(x + ":" + y).increaseScore()
   else temp.put(x + ":" + y, poi)
  }
  temp.size()
 }


 def RoundStat(part: Int, pois: Iterable[POI], round: Int): (Int, Int) = {
  if (pois.size > 5000)
   System.err.println("poi# in a partition " + pois.size + " on location around   " + pois.head.getPoint.getX + ":" + pois.head.getPoint.getY)
  val temp = new util.HashMap[String, POI]
  for (poi <- pois) {
   val x = poi.getPoint.getX
   val y = poi.getPoint.getY
   if (temp.containsValue(x + ":" + y))
    temp.get(x + ":" + y).increaseScore()
   else temp.put(x + ":" + y, poi)
  }
  (pois.size, temp.size())
 }
/*Final Result in 14 iteration
Nround,300 eps,5.0E-4
1:45.85164795,18.30081615     232.0
2:43.46290095,-3.8099748     85.0
3:48.86064745,2.3397401     81.0
4:50.07871025,14.4611388     58.0
5:50.258828,19.0177294     57.0
6:41.223249949999996,1.72380395     55.0
7:50.2588441,19.017018     51.0
8:41.850972,12.5993181     51.0
9:41.01281075,28.96642535     47.0
10:43.68835885,1.4020611     45.0
11:53.456482449999996,9.987344700000001     43.0
12:52.4013547,16.927614499999997     41.0
13:53.928796250000005,27.58246345     41.0
14:52.95644675,-1.14675095     40.0
15:52.4741951,13.3372819     40.0
16:51.51281675,7.4597324     40.0
17:53.63731,10.0303708     39.0
18:51.513567550000005,7.45903585     39.0
19:52.1081191,23.772780400000002     39.0
20:42.8443784,-2.66696175     39.0
21:58.98420415,5.69128815     38.0
22:47.0772991,15.4755333     38.0
23:41.01086515,28.9586857     38.0
24:41.0131167,28.96721565     38.0
25:51.5414121,-0.1460427     37.0
26:51.4623201,-0.1117789     37.0
27:42.33790825,-3.7003172500000003     37.0
28:51.9201444,4.487334000000001     36.0
29:53.5346879,10.0457193     36.0
30:53.5827619,9.983696     36.0
31:63.4336123,10.3961982     36.0
32:53.701534,23.833739549999997     36.0
33:59.927487,30.359705050000002     36.0
34:50.848395100000005,4.3528071     35.0
35:59.92767525,10.698870750000001     35.0
36:53.5682312,9.9815261     35.0
37:45.829450449999996,1.2566069500000001     35.0
38:42.776153449999995,2.9133803499999997     35.0
39:53.56973455,9.98210535     34.0
40:53.573582,9.9819467     34.0
41:49.5929795,11.00417195     34.0
42:53.1363587,23.1628344     34.0
43:48.151828,17.15762255     34.0
44:52.40247205,16.9252599     33.0
45:51.429535200000004,6.886505250000001     33.0
46:49.5461715,25.5924901     33.0
47:48.4535406,-2.0447575000000002     33.0
48:44.429192799999996,8.952368199999999     33.0
49:41.01436605,28.967367699999997     33.0
50:53.55051335,9.98094785     32.0
51:53.55136115,9.99631975     32.0
52:53.56807065,9.97961915     32.0
53:52.0803919,4.324731     31.0
54:51.752658,-1.2567953     31.0
55:52.4773421,-1.8950111     31.0
56:51.5564033,-0.28388125     31.0
57:54.47573465,18.55187315     31.0
58:58.85096755,5.7360714     31.0
59:49.550966700000004,25.5933384     31.0
60:45.775117,3.08323055     31.0
61:43.6100829,3.87671895     31.0
62:41.00435765,28.93098815     31.0
63:48.7145365,21.23856855     31.0
64:53.55182245,9.9954705     30.0
65:53.5686082,9.980178800000001     30.0
66:50.4476358,30.50354445     30.0
67:46.94916954999999,7.44024515     30.0
68:46.539367150000004,19.24318125     30.0
69:53.5838542,9.98708515     29.0
70:53.568920649999995,9.98340475     29.0
71:52.40218205,16.9260121     29.0
72:50.9220339,6.9616837     29.0
73:52.090827149999996,21.12163475     29.0
74:57.14332485,24.84461365     29.0
75:38.2655051,-0.6975228499999999     29.0
76:43.62751155,3.81728615     29.0
77:44.4785057,26.1031853     29.0
78:41.0139527,28.969746100000002     29.0
79:41.0109887,28.95769835     29.0
80:41.02064335,28.948584949999997     29.0
81:60.3893156,5.3324313     28.0
82:55.6714052,12.5467367     28.0
83:53.58201185,9.98247155     28.0
84:53.5699578,9.98281435     28.0
85:53.5501027,9.979484     28.0
86:50.93093745,6.9402191     28.0
87:53.711462499999996,23.84886105     28.0
88:59.92801095,30.360114199999998     28.0
89:48.82060885,2.2519695     28.0
90:40.446865200000005,-3.58714365     28.0
91:40.64106955,-8.65091705     28.0
92:41.0147008,28.9663785     28.0
93:41.0102078,28.9589903     28.0
94:41.0122671,28.96640815     28.0
95:37.9761467,23.732914700000002     28.0
96:37.9446044,23.64651535     28.0
97:48.7173911,21.2620522     28.0
98:52.477908049999996,-1.893523     27.0
99:51.50791015,-0.1390728     27.0
100:60.3926477,5.32623525     27.0
101:49.457043999999996,-2.53586965     27.0
102:53.6122478,10.07624075     27.0
103:53.62897795,11.4113748     27.0
104:49.825063099999994,19.048047150000002     27.0
105:50.936985500000006,6.94122885     27.0
106:50.935074400000005,6.93647325     27.0
107:51.6133279,7.200309799999999     27.0
108:52.114683850000006,8.6724161     27.0
109:49.55414005,25.59910115     27.0
110:47.0725859,15.4391615     27.0
111:43.45774685,-3.82516125     27.0
112:43.25913955,-2.92208235     27.0
113:43.6085121,3.8847392000000003     27.0
114:48.77264545,18.624163199999998     27.0
115:51.9200517,4.4866489     26.0
116:52.9553799,-1.14919625     26.0
117:51.46198484999999,-0.1131382     26.0
118:60.39436965,5.32285375     26.0
119:51.45557475,-2.61843615     26.0
120:54.3163284,10.130866699999999     26.0
121:53.570144799999994,9.9814033     26.0
122:53.57067515,9.98491705     26.0
123:52.5250317,13.370058100000001     26.0
124:51.5355538,9.934891449999999     26.0
125:50.07866679999999,8.2372798     26.0
126:49.4777797,8.4538766     26.0
127:49.5492718,25.5895771     26.0
128:49.55240255,25.59915835     26.0
129:53.533486800000006,33.73101715     26.0
130:53.9258895,27.518027449999998     26.0
131:47.8186356,16.2180063     26.0
132:47.0719615,15.4384797     26.0
133:48.19731245,16.337572299999998     26.0
134:48.14747945,11.463973750000001     26.0
135:37.76815685,-3.7891123999999996     26.0
136:40.4195615,-3.7972329499999997     26.0
137:41.01364785,28.967506399999998     26.0
138:41.00369095,28.93107405     26.0
139:48.507626650000006,32.2640665     26.0
140:37.97672095,23.7319867     26.0
141:37.9764365,23.7303553     26.0
142:37.976575600000004,23.7341068     26.0
143:48.717812699999996,21.2632358     26.0
144:53.3012874,-6.1779853     25.0
145:52.3752542,4.8982497     25.0
146:60.39303675,5.324824     25.0
147:53.3274054,9.87982275     25.0
148:51.0943522,17.01953505     25.0
149:49.756044349999996,6.637875     25.0
150:50.9454619,6.96034705     25.0
151:50.943043349999996,6.948763899999999     25.0
152:50.10184795,8.76203405     25.0
153:51.49681885,7.00758585     25.0
154:49.773541449999996,24.0109621     25.0
155:59.4221728,24.7937642     25.0
156:55.19111985,30.20295635     25.0
157:48.2434857,14.235792799999999     25.0
158:47.067425,15.442436149999999     25.0
159:46.624736,14.3078511     25.0
160:43.46103985,-3.8084399500000004     25.0
161:43.25782695,-2.92416745     25.0
162:43.257220000000004,-2.9229129     25.0
163:48.148246549999996,11.46405275     25.0
164:44.9672636,20.2810742     25.0
165:42.06963055,19.508452249999998     25.0
166:48.8654139,2.4169308000000003     25.0
167:48.865521900000005,2.41625545     25.0
168:40.4713121,-3.87112335     25.0
169:44.52948835,11.292484850000001     25.0
170:47.2159007,-1.55276125     25.0
171:43.25299395,5.422920899999999     25.0
172:44.42922765,8.94892055     25.0
173:42.527358050000004,3.08456115     25.0
174:44.477869049999995,26.1032252     25.0
175:40.9241365,29.1320446     25.0
176:48.717627300000004,21.26272755     25.0
177:51.5078998,-0.12431439999999999     24.0
178:51.0622266,-1.3150865500000002     24.0
179:54.3828959,18.606054049999997     24.0
180:51.453879799999996,-2.59319085     24.0
181:49.45522065,-2.53655105     24.0
182:53.5512496,9.99682885     24.0
183:52.40150425,16.928311649999998     24.0
184:63.4300935,10.3932449     24.0
185:51.05225445,13.74057565     24.0
186:49.59498,11.004710249999999     24.0
187:50.833709549999995,12.920864949999999     24.0
188:51.83411995,12.2449151     24.0
189:50.93382165,6.95620625     24.0
190:50.80976695,8.7709376     24.0
191:51.4631808,7.00422335     24.0
192:53.1364101,23.16334945     24.0
193:52.31789465,20.9660532     24.0
194:54.70990415,25.1872625     24.0
195:43.4619918,-3.80917875     24.0
196:47.5024796,9.7465704     24.0
197:47.4105181,8.54302335     24.0
198:47.49961305,8.723405150000001     24.0
199:48.771846749999995,9.17271435     24.0
200:48.7794101,9.17804275     24.0
201:49.006855349999995,8.402169     24.0
202:42.06639815,19.5073989     24.0
203:49.03626095,2.08049425     24.0
204:40.633464849999996,-4.00433535     24.0
205:39.8587438,-4.02299415     24.0
206:44.8023687,10.3226013     24.0
207:47.39256375,0.68848305     24.0
208:45.192986899999994,5.7140787     24.0
209:46.53894405,19.24231535     24.0
210:44.47838295,26.1037027     24.0
211:41.011196,28.9729658     24.0
212:50.8478925,4.352458     23.0
213:50.878711249999995,4.6994555     23.0
214:50.8276198,-0.13782470000000002     23.0
215:52.9224642,-1.47595955     23.0
216:51.5138769,-0.0954255     23.0
217:54.4750941,18.55190615     23.0
218:54.18563635,19.40688385     23.0
219:60.3891469,5.3318942499999995     23.0
220:53.5704644,9.98045445     23.0
221:49.69112005,19.20095435     23.0
222:50.27118085,19.00537405     23.0
223:50.84645365,12.938397649999999     23.0
224:54.3280879,-2.7462739     23.0
225:49.7558797,6.638419900000001     23.0
226:50.93653075,6.9362165000000005     23.0
227:50.927490399999996,6.9564089     23.0
228:50.96352105,7.1618150499999995     23.0
229:50.049525200000005,8.69770495     23.0
230:49.97605005,9.147597000000001     23.0
231:50.1352399,8.9188655     23.0
232:52.260241699999995,9.04995225     23.0
233:51.6817973,7.8132038     23.0
234:51.357552,7.47507935     23.0
235:53.701549299999996,23.8344059     23.0
236:49.5524126,25.5939671     23.0
237:60.01215005,30.398815149999997     23.0
238:59.4213184,24.793259     23.0
239:53.90414045,27.552427     23.0
240:49.191747199999995,16.61253285     23.0
241:48.244101,14.236414100000001     23.0
242:48.1963444,16.33791345     23.0
243:43.26185045,-2.9384587499999997     23.0
244:47.2625763,11.43023815     23.0
245:45.6940861,9.6643007     23.0
246:47.40816715,8.59596765     23.0
247:42.0638713,19.5075339     23.0
248:45.774838700000004,3.08093695     23.0
249:48.8529349,2.3453502     23.0
250:48.89697445,2.09250165     23.0
251:44.80211575,10.32633895     23.0
252:40.64252835,-8.653388450000001     23.0
253:44.40969575,8.92940605     23.0
254:37.1756455,-3.6009418     23.0
255:38.22218495,15.24272775     23.0
256:43.603269,1.44910475     23.0
257:43.605154299999995,1.44244525     23.0
258:41.04787,29.025849049999998     23.0
259:41.01442445,28.97624875     23.0
260:41.009169400000005,28.95464185     23.0
261:41.0083149,28.976167699999998     23.0
262:46.583937399999996,30.7937022     23.0
263:48.71809005,21.26380125     23.0
264:35.09641155,24.68782405     23.0
265:52.0898092,5.12043995     22.0
266:50.84022985,0.4715876     22.0
267:52.9575507,-1.14741475     22.0
268:52.48032945,-2.1108817     22.0
269:52.4816953,-2.11126325     22.0
270:51.482798349999996,-0.60923335     22.0
271:51.46231105,-0.11234585     22.0
272:60.3930892,5.32540575     22.0
273:51.381166300000004,-2.3579262     22.0
274:53.5672976,9.980558349999999     22.0
275:53.5903839,9.974619350000001     22.0
276:53.576906050000005,9.95144345     22.0
277:50.05999855,19.93776185     22.0
278:52.232358399999995,18.25287995     22.0
279:51.2629288,15.56879     22.0
280:51.5344888,9.93518965     22.0
281:54.05050335,-2.80071735     22.0
282:53.5681359,-2.88542925     22.0
283:50.91913045,6.96060555     22.0
284:50.9384643,6.9437906     22.0
285:50.9298756,6.938106400000001     22.0
286:50.05005695,8.69925125     22.0
287:49.872215100000005,8.651740100000001     22.0
288:51.20211625,6.7180815     22.0
289:49.61041095,6.129658     22.0
290:51.4991479,31.28924695     22.0
291:49.54471995,25.592741500000002     22.0
292:52.31805815,20.9668649     22.0
293:52.31702725,20.96732835     22.0
294:50.9403154,21.37541925     22.0
295:50.9405694,21.37456565     22.0
296:53.92858335,27.58303095     22.0
297:47.0710087,15.43774185     22.0
298:47.07576265,15.4493686     22.0
299:47.80201955,13.04524095     22.0
300:48.573843600000004,13.4552214     22.0*/

}