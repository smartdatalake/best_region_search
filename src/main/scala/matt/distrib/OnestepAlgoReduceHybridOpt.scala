package matt.distrib

import matt.ca.BCAIndexProgressiveOneRoundRedHybrid
import matt.definitions.{Generic, GridIndexer}
import matt.score.{OneStepResult, ScoreFunctionTotalScore}
import matt.{DependencyGraph, POI, SpatialObject}
import org.apache.spark.rdd.RDD

import scala.collection.JavaConversions._
import scala.collection.immutable.HashSet
import scala.collection.mutable
import scala.collection.mutable.ListBuffer

object OnestepAlgoReduceHybridOpt {

  def oneStepAlgo(input: (Int, Iterable[POI]), eps: Double, topk: Int, previous: ListBuffer[SpatialObject], gridIndexer: GridIndexer): (Int, OneStepResult) = {
    val pois: java.util.List[POI] = ListBuffer(input._2.toList: _*)
    val scoreFunction = new ScoreFunctionTotalScore[POI]()
    val bcaFinder = new BCAIndexProgressiveOneRoundRedHybrid(true, gridIndexer)
    (input._1, bcaFinder.findBestCatchmentAreas(pois, input._1, eps, topk, scoreFunction, previous))
  }

  def Run(nodeToPoint: RDD[(Int, POI)], eps: Double, topk: Int, gridIndexer: GridIndexer, base: Int, Kprime: Int) {
    var Ans = ListBuffer[SpatialObject]()
  //  var mapped = new mutable.HashMap[Int, Int]
  //  var used = new mutable.HashMap[Int, Int]
    var round = 1
    var rdds: Array[RDD[(Int, OneStepResult)]] = new Array[RDD[(Int, OneStepResult)]](base * roundUp(math.log(gridIndexer.width) / math.log(base)) + 1)
    val data = nodeToPoint.groupByKey()
    rdds(0) = data.map(x => oneStepAlgo(x, eps, Kprime, Ans, gridIndexer))
    var lvl=0
    while (Ans.size < topk) {
      lvl = 1;
      println(rdds(0).count())
      println(roundUp(math.log(gridIndexer.width) / math.log(base)))
      while (lvl <= roundUp(math.log(gridIndexer.width) / math.log(base))) {
        rdds(lvl) = rdds(lvl - 1).map(x => mapper(x._1, x._2, gridIndexer, lvl, base: Int)).groupByKey().map(x => reducer(x._1, x._2, gridIndexer, lvl, base, topk,Ans))
        rdds(lvl).cache()
        var t=0
        rdds(lvl).collect().foreach(x=>t+=x._2.spatialObjects.size)
        println(t)
        println(lvl + ":::" + rdds(lvl).count())
        // rdds(lvl-1)=null
        lvl += 1
      }
      val roundResults = rdds(lvl - 1).map(x => x._2).collect().toList.get(0).spatialObjects
      Ans.addAll(roundResults)

      var topKIndex: HashSet[Int] = HashSet();
      for (spatialObject <- roundResults) {
        val part = gridIndexer.getNodeNumber(spatialObject.getGeometry().getCoordinates().toList(1).x
          , spatialObject.getGeometry().getCoordinates().toList(1).y)
        topKIndex.+=(part);
      }
    //  println(topKIndex)
      val partialRoundRDD = data.filter(x => topKIndex.contains(x._1)).map(x => oneStepAlgo(x, eps, Kprime, Ans, gridIndexer))
   //   partialRoundRDD.collect().foreach(x=>println(x._2.spatialObjects))

      val temp=partialRoundRDD.union(rdds(0))
      rdds= new Array[RDD[(Int, OneStepResult)]](base * roundUp(math.log(gridIndexer.width) / math.log(base)) + 1)
      rdds(0)=temp

      round += 1
    }
    //imple selecting query partition all partition that have less than k' safe region
    //print out frequency of querying partition and icrease for 3rd 4rth round
    Ans = Ans.sortBy(_.getScore).reverse
    System.err.println("SingleHybridOpt," + topk + " eps," + eps)
    for (i <- 0 to (topk - 1)) {
      System.err.println((i + 1) + ":" + Ans.get(i).getId + "     " + Ans.get(i).getScore);

    }
    //  Ans.sortBy(_.getScore).reverse.foreach(x => System.err.println(x.getId + ":::::::" + x.getScore))
  }

  def mapper(index: Int, result: OneStepResult, gridIndexer: GridIndexer, lvl: Int, base: Int): (Int, OneStepResult) = {
    val (nodeI, nodeJ) = ((index - 1) % width(lvl - 1, base: Int, gridIndexer), ((index - 1) / width(lvl - 1, base: Int, gridIndexer).asInstanceOf[Double]).toInt)
    ((nodeI / base).toInt + (nodeJ / base).toInt * width(lvl, base: Int, gridIndexer) + 1, result)
  }

  def reducer(index: Int, results: Iterable[OneStepResult], gridIndexer: GridIndexer, lvl: Int, base: Int, topK: Int,Ans:ListBuffer[SpatialObject]): (Int, OneStepResult) = {
    var preSafe = 0
    var preUnsafe = 0
    val dependencyGraph = new DependencyGraph(gridIndexer)
    results.foreach(x => {
      preSafe += x.countSafe
      preUnsafe += x.countUnsafe
    })
    val I = ((index - 1) % width(lvl, base: Int, gridIndexer))
    val J = (((index - 1) / (width(lvl, base: Int, gridIndexer)).asInstanceOf[Double]).toInt)
    val cornerALong = I * math.pow(base, lvl).toInt * gridIndexer.gridSizePerCell
    val cornerALat = J * math.pow(base, lvl).toInt * gridIndexer.gridSizePerCell
    val cornerBLong = cornerALong + math.pow(base, lvl).toInt * gridIndexer.gridSizePerCell - 1
    val cornerBLat = cornerALat + math.pow(base, lvl).toInt * gridIndexer.gridSizePerCell - 1
    var maxMin = 0.0
    var minlocal = 200000.0
    results.foreach(x => {
      minlocal = 1000000.0
      if(x.spatialObjects==null||x.spatialObjects.size==0) minlocal=0;
      x.spatialObjects.foreach(x => if (x.getScore < minlocal) minlocal = x.getScore())
      if (maxMin < minlocal)
        maxMin = minlocal
    })
    var candidates = new ListBuffer[SpatialObject]
    results.foreach(x => candidates.addAll(x.spatialObjects))
    candidates = candidates.sortBy(_.getScore).reverse
    var pos = 0
    var unsafe = 0
    while (dependencyGraph.safeRegionCnt < topK && pos < candidates.size && candidates.get(pos).getScore >= maxMin) {
      val instance = candidates.get(pos)
      if ( !Generic.intersectsList(instance,Ans)) {
        val con = dependencyGraph.overlapCon(instance);
        val (cellI, cellJ) = gridIndexer.getCellIndex(instance.getGeometry.getCoordinates.toList(1).x.toFloat
          , instance.getGeometry.getCoordinates.toList(1).y.toFloat)
        if (con == 0 && !(cellI == cornerALong || cellI == cornerBLong || cellJ == cornerALat || cellJ == cornerBLat))
          dependencyGraph.addSafeRegion(instance)
        else if (con == 1) {
          val a = 0
        }
        else if (con == 2 || (cellI == cornerALong || cellI == cornerBLong || cellJ == cornerALat || cellJ == cornerBLat)) {
          dependencyGraph.addUnsafeRegion(instance);
          unsafe += 1
          if (dependencyGraph.IsDependencyIncluded(instance)) {
            // Do not add Safe
            // Do not add M
            var a = 0
          } else {
            dependencyGraph.increaseSafeCNT();
            dependencyGraph.addM(instance);
          }
        }
      }
      pos += 1
    }
    (index, new OneStepResult(dependencyGraph.safeRegionCnt, unsafe, index, 0, dependencyGraph.getFinalResult()))
  }

  def roundUp(d: Double) = math.ceil(d).toInt

  def width(lvl: Int, base: Int, gridIndexer: GridIndexer): Int = {
    var width = gridIndexer.width
    for (i <- 1 to lvl)
      width = roundUp(width / base.asInstanceOf[Double])
    return width
  }
/*
1:10.04572165:53.5346879     34.0
2:-1.1388547999999998:53.52436725     19.0
3:-0.21696185:51.4611236     18.0
4:-0.15859295:51.49176885     17.0
5:-0.10304105:51.5424558     17.0
6:-1.4979656499999998:53.685662449999995     16.0
7:8.4603736:48.0585046     16.0
8:-1.8253906500000001:52.68135575     16.0
9:0.016948949999999997:51.40061815     15.0
10:24.9395562:60.1718714     15.0
11:-1.5358866:53.79740245     15.0
12:8.46008535:48.05921185     15.0
13:6.356248750000001:46.9031035     15.0
14:-0.10237135:51.53924775     15.0
15:-0.21565265:51.55712175     14.0
16:8.460869299999999:48.0573091     14.0
17:0.21657605:51.44618255     14.0
18:0.0131971:51.406234999999995     14.0
19:-0.21226325000000001:51.55413795     14.0
20:6.92857375:46.9922935     14.0
21:8.543564:47.37389975     14.0
22:-0.24219605:52.57320385     14.0
23:-0.3070629:51.43077665     14.0
24:-0.21350255:51.5550596     14.0
25:4.83476795:45.7572059     14.0
26:-0.21390455:51.55559825     14.0
27:6.35308865:46.9043779     14.0
28:8.9190881:50.1330522     13.0
29:-1.7867530999999999:53.6457374     13.0
30:-0.37464655:51.6075723     13.0
31:-0.0742853:51.55771625     13.0
32:-0.11014760000000001:51.59785205     13.0
33:0.015990400000000002:51.4016805     13.0
34:-1.2624749:51.7540235     13.0
35:-0.1024563:51.53985025     13.0
36:-2.3519158:53.467941499999995     13.0
37:-0.16246460000000001:51.354790449999996     12.0
38:6.355161649999999:46.904338249999995     12.0
39:-0.37407765000000004:51.60771855     12.0
40:7.02564195:51.42090955     12.0
41:-0.21476345:51.556097050000005     12.0
42:-2.5298514:53.248323150000004     12.0
43:0.21647385:51.44456455     12.0
44:6.35544695:46.903414749999996     12.0
45:-2.5186368:52.70100675     12.0
46:0.0158022:51.4064812     12.0
47:0.14360030000000001:52.197921     12.0
48:-2.2245853:53.010476499999996     12.0
49:-2.8922404:53.394658750000005     12.0
50:8.460635799999999:48.0578555     12.0
51:6.9563695:50.93994085     12.0
52:-1.47800175:53.55460395     12.0
53:7.76817795:50.0595557     12.0
54:5.30574645:51.68808935     12.0
55:6.94368595:50.9384491     12.0
56:1.15498525:52.05554035     12.0
57:0.016323749999999998:51.40727525     12.0
58:6.090643200000001:50.77741595     11.0
59:10.9649073:50.2592139     11.0
60:7.3393365500000005:52.1478162     11.0
61:11.57472315:48.156838449999995     11.0
62:-1.54212525:53.7986419     11.0
63:0.11786905:52.204691600000004     11.0
64:0.7104013:52.24780185     11.0
65:-1.47792595:53.5540076     11.0
66:8.464659900000001:48.05874065     11.0
67:19.94030625:50.063290499999994     11.0
68:-1.5456188499999999:53.7995365     11.0
69:-2.07918205:52.511253749999995     11.0
70:-0.5725291:51.2357328     11.0
71:-0.13231705:51.4746333     11.0
72:6.3573098:46.9026547     11.0
73:-0.1877291:51.513393300000004     11.0
74:-1.08536575:51.26621045     11.0
75:24.856327399999998:60.627953500000004     11.0
76:-1.55330795:47.21538125     11.0
77:6.351247900000001:46.9056372     11.0
78:-0.16145055:51.49069985     11.0
79:-0.06988815:51.5914839     11.0
80:-1.5357493999999998:53.7968048     11.0
81:-0.18434145:52.32881235000001     11.0
82:-0.64174275:52.9096568     11.0
83:21.01097815:52.249708299999995     11.0
84:5.3046367:51.688708399999996     11.0
85:-0.5735395999999999:51.2354842     11.0
86:0.0121629:51.40687005     11.0
87:0.11795040000000001:52.20412495     11.0
88:-1.6148294:54.976767949999996     11.0
89:11.63590535:48.17313575     11.0
90:6.9180285:50.949315850000005     11.0
91:-2.24777935:53.48109975     11.0
92:-0.2115648:51.5534917     11.0
93:10.162222400000001:49.7391456     11.0
94:6.95629675:50.938885150000004     11.0
95:-1.08643815:51.263504499999996     11.0
96:-0.18763035:51.5126974     11.0
97:-3.026981:53.3614941     11.0
98:10.8445552:59.754492049999996     11.0
99:16.408099149999998:48.2763271     11.0
100:-0.5696266:51.2365678     11.0
101:-1.58208905:54.7773807     11.0
102:6.941666100000001:50.938009550000004     11.0
103:12.5696044:48.88184325     11.0
104:6.35167875:46.9049937     10.0
105:8.91982585:50.1324519     10.0
106:-1.3316724:52.0623861     10.0
107:5.7188564500000005:45.1861141     10.0
108:6.95628565:50.93834485     10.0
109:7.84124035:47.9965756     10.0
110:-1.1793309500000002:50.851755     10.0
111:6.9511564:50.93887505     10.0
112:-2.2466581000000003:53.482828100000006     10.0
113:10.7856925:51.833963749999995     10.0
114:12.5707378:48.88193675     10.0
115:11.41248485:53.6283544     10.0
116:19.9340355:50.06290845     10.0
117:-0.5741082500000001:51.236211350000005     10.0
118:-0.5944762:51.256344299999995     10.0
119:-0.1037737:51.53613475     10.0
120:16.38848875:48.20418295     10.0
121:33.29596035:34.77206565     10.0
122:8.45756725:48.0597884     10.0
123:13.308940549999999:45.9057578     10.0
124:19.93678735:50.0631595     10.0
125:-0.1056493:51.534161999999995     10.0
126:-1.0857423:51.26243255     10.0
127:9.584852099999999:48.7066849     10.0
128:-0.5672997:51.237454299999996     10.0
129:9.1812146:48.7839048     10.0
130:0.0759467:43.23162965     10.0
131:-0.10827305000000001:51.5493034     10.0
132:-0.5745772499999999:51.2352033     10.0
133:-0.11734834999999999:51.5422566     10.0
134:-0.17438415000000002:51.3844158     10.0
135:-2.7091911:52.0585436     10.0
136:-0.37333055000000004:51.607945799999996     10.0
137:9.951635750000001:52.154821     10.0
138:19.937162649999998:50.060594300000005     10.0
139:6.7367472500000005:51.566881550000005     10.0
140:-1.14863095:52.95910135     10.0
141:-2.24097335:51.86547815     10.0
142:6.9425805:50.93805905     10.0
143:-1.9397334:52.4390153     10.0
144:-3.3604301999999997:55.9469839     10.0
145:-1.6205205:48.0877568     10.0
146:-1.6986200999999999:54.8691746     10.0
147:12.516843699999999:55.66271665     10.0
148:-0.07358165:51.5621474     10.0
149:12.5723186:48.88213125     10.0
150:6.956188:50.934425700000006     10.0
151:5.31515145:51.6892225     10.0
152:10.0631276:49.664933950000005     10.0
153:-1.3851532500000001:54.902487550000004     10.0
154:9.837147300000002:54.4708188     10.0
155:-1.0876302999999998:51.262441100000004     10.0
156:0.26371255:51.889358400000006     10.0
157:-1.6318142999999998:53.689823649999994     10.0
158:0.21768664999999998:51.4442742     10.0
159:24.5138122:37.14273465     10.0
160:0.2631915:51.8886588     10.0
161:-1.11765825:50.79430755     10.0
162:-0.1414786:51.510427699999994     10.0
163:6.3506363:46.90536315     10.0
164:-2.6342981500000002:53.5471797     10.0
165:1.08210815:51.276626050000004     10.0
166:0.21965025:51.443978900000005     10.0
167:0.0148066:51.403827     10.0
168:9.9304199:49.79635345     10.0
169:10.60835655:49.5799011     10.0
170:19.93830505:50.0609045     10.0
171:-2.89373435:53.19209135     10.0
172:-2.1843461499999997:51.26091585     10.0
173:-1.4665504:52.5244742     10.0
174:-2.59258895:51.459238049999996     10.0
175:11.5838954:48.134243850000004     10.0
176:6.358026499999999:46.902364399999996     10.0
177:11.5895261:48.16198165     10.0
178:19.9383324:50.06259355     9.0
179:0.1134133:51.700560249999995     9.0
180:-0.0281519:51.4067436     9.0
181:0.8708183:51.148394550000006     9.0
182:-0.21052300000000002:51.5527247     9.0
183:10.608961449999999:49.58047195     9.0
184:-0.5657708:51.23793     9.0
185:6.9500019:50.9370394     9.0
186:8.543765650000001:47.372884     9.0
187:5.30311665:51.6891715     9.0
188:0.1445344:52.19768045     9.0
189:0.8700226:51.14975595     9.0
190:-2.18251665:51.2628307     9.0
191:-0.1887828:51.518150500000004     9.0
192:6.9291149:46.99185435     9.0
193:-0.5735819:51.23483385     9.0
194:9.931171899999999:49.7965425     9.0
195:-0.57123905:51.236052650000005     9.0
196:6.9689803999999995:51.6584555     9.0
197:-1.94054685:52.438670099999996     9.0
198:6.92804095:46.99303875     9.0
199:16.934099850000003:52.4086249     9.0
200:19.9357194:50.061901399999996     9.0
201:8.068997:52.252135249999995     9.0
202:8.91851695:50.13235795     9.0
203:7.7959463499999995:47.98813995     9.0
204:-1.8472875:53.62491095     9.0
205:-0.21650685:51.5574567     9.0
206:0.21411475:51.4449142     9.0
207:21.012676550000002:52.25001305000001     9.0
208:10.0307526:49.46955885     9.0
209:0.2182578:51.44421935     9.0
210:16.38695885:48.20528535     9.0
211:-2.0039601:52.5240892     9.0
212:-0.7606644499999999:51.2464746     9.0
213:-0.33955815:51.5705264     9.0
214:-1.5400938499999999:53.796365550000004     9.0
215:-3.1915576:55.955401     9.0
216:-3.1319444:51.50895385     9.0
217:-1.9341887:52.4244551     9.0
218:-0.21295075000000002:51.55470425     9.0
219:8.34232675:47.3517486     9.0
220:-6.6772582:53.66329315     9.0
221:11.5984169:48.1284246     9.0
222:-1.7868105:53.6451906     9.0
223:-0.10291795000000001:51.537878199999994     9.0
224:19.94080255:50.0641824     9.0
225:-6.2653945:53.3163238     9.0
226:-0.14208475:51.510388500000005     9.0
227:0.87134325:51.148770299999995     9.0
228:-2.1635806:53.4087782     9.0
229:-0.025319750000000002:51.4101184     9.0
230:-1.88211205:53.756549050000004     9.0
231:-1.9448387:52.3057856     9.0
232:1.75187765:52.47732895     9.0
233:-3.0037697000000003:53.35612815     9.0
234:22.9492148:40.6468322     9.0
235:9.18208185:48.7834691     9.0
236:-1.08632375:51.26258435     9.0
237:-0.07273494999999999:51.5668413     9.0
238:8.543828300000001:47.3747507     9.0
239:-1.3101473499999998:51.06189365     9.0
240:-1.93382805:52.445368200000004     9.0
241:11.643378850000001:48.16677215     9.0
242:8.9194216:50.13416185     9.0
243:-0.02527:51.40956995     9.0
244:-2.0960843999999996:53.490118550000005     9.0
245:8.45959025:48.06062365     9.0
246:6.9566095:50.940445100000005     9.0
247:-3.56647385:50.4346755     9.0
248:-2.1221204499999997:52.5854766     9.0
249:-0.571688:51.2351981     9.0
250:-0.0756941:51.562152     9.0
251:7.5718390499999995:50.42503115     9.0
252:0.45896815:51.5687899     9.0
253:8.724069:47.2407576     9.0
254:8.69043505:50.105565049999996     9.0
255:0.1228406:52.204483100000004     9.0
256:-0.1507358:51.5129423     9.0
257:-0.5717975500000001:51.2358562     9.0
258:0.01376715:51.4059556     9.0
259:11.414566449999999:53.62884235     9.0
260:8.46108925:48.0566478     9.0
261:-1.6325634999999998:53.8139997     9.0
262:-0.10228195:51.53866985     9.0
263:-0.9050791:51.5376465     9.0
264:12.051935499999999:49.0132799     9.0
265:-2.29737955:53.5914264     9.0
266:6.953851650000001:50.937417100000005     9.0
267:-2.20012815:53.54776155     9.0
268:10.06491765:49.6642562     9.0
269:-8.17086025:43.40673365     9.0
270:0.124061:52.205344049999994     9.0
271:11.3750995:44.646426500000004     9.0
272:9.6769102:50.553815799999995     9.0
273:10.6932418:45.43866025     9.0
274:-2.58596885:56.5591533     9.0
275:6.959963999999999:50.9365466     9.0
276:-1.4637896499999998:53.380072350000006     9.0
277:9.2078132:48.78563175     9.0
278:10.9126147:50.684024949999994     9.0
279:-0.1351956:51.516023649999994     9.0
280:6.95396255:50.936637950000005     9.0
281:-1.69316885:53.9048997     9.0
282:-0.07360554999999999:51.5603918     9.0
283:-1.982405:52.58546285     9.0
284:-1.8317582:54.8529999     8.0
285:-3.61128325:55.071151099999994     8.0
286:29.41500825:36.2650704     8.0
287:6.3547784:46.90242815     8.0
288:-1.5487625999999999:53.797715499999995     8.0
289:34.84709705:38.71871405     8.0
290:-1.5427255500000001:53.7991199     8.0
291:9.42364745:53.7871138     8.0
292:-1.7502631:53.79118105     8.0
293:44.997757050000004:53.1758681     8.0
294:32.8547459:39.8851124     8.0
295:9.9813294:53.5671082     8.0
296:-1.5560022999999998:53.81072155     8.0
297:4.84781245:45.759924350000006     8.0
298:25.077185:60.2098821     8.0
299:32.8604066:39.902952850000005     8.0
300:24.75785125:60.37776125     8.0
*/
}