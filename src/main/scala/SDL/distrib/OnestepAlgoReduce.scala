/* SimpleApp.scala */
package SDL.distrib

import SDL.ca.BCAIndexProgressiveOneRoundRed
import SDL.definitions.GridIndexer
import SDL.score.{OneStepResult, ScoreFunctionTotalScore}
import SDL.{DependencyGraph, POI, SpatialObject}
import org.apache.spark.rdd.RDD

import scala.collection.JavaConversions._
import scala.collection.mutable.ListBuffer

object OnestepAlgoReduce {


  def oneStepAlgo(input: (Int, Iterable[POI]), eps: Double, topk: Int, gridIndexer: GridIndexer): (Int, OneStepResult) = {
    val pois: java.util.List[POI] = ListBuffer(input._2.toList: _*)
    val scoreFunction = new ScoreFunctionTotalScore[POI]()
    val bcaFinder = new BCAIndexProgressiveOneRoundRed(true, gridIndexer)
    (input._1, bcaFinder.findBestCatchmentAreas(pois, input._1, eps, topk, scoreFunction))
  }

  def Run(nodeToPoint: RDD[(Int, POI)], eps: Double, topk: Int, gridIndexer: GridIndexer, base: Int) {
    var Ans = ListBuffer[SpatialObject]()

    var lvl = 1;
    val lvl0 = nodeToPoint.groupByKey().map(x => oneStepAlgo(x, eps, topk, gridIndexer))
    var rdds: Array[RDD[(Int, OneStepResult)]] = new Array[RDD[(Int, OneStepResult)]](base * roundUp(math.log(gridIndexer.width) / math.log(base)) + 1)
    rdds(0) = nodeToPoint.groupByKey().map(x => oneStepAlgo(x, eps, topk, gridIndexer))
    // println(rdds(0).map(x=>x._2.countUnsafe+x._2.countSafe).sum())
    //    return
    println(roundUp(math.log(gridIndexer.width) / math.log(base)))
    while (lvl <= roundUp(math.log(gridIndexer.width) / math.log(base))) {
      rdds(lvl) = rdds(lvl - 1).map(x => mapper(x._1, x._2, gridIndexer, lvl, base: Int)).groupByKey().map(x => reducer(x._1, x._2, gridIndexer, lvl, base, topk))
      rdds(lvl).cache()
      println(lvl + ":::" + rdds(lvl).count())
      rdds(lvl - 1) = null
      lvl += 1
    }
    Ans.addAll(rdds(lvl - 1).map(x => x._2).collect().toList.get(0).spatialObjects)
    Ans = Ans.sortBy(_.getScore).reverse
    //   System.out.println("dependency size:::"+(rdds(lvl - 1).map(x => x._2).collect().toList.get(0).countUnsafe))
    System.err.println("Single," + topk + " eps," + eps)
    for (i <- 0 to (topk - 1)) {
      System.err.println((i + 1) + ":" + Ans.get(i).getId + "     " + Ans.get(i).getScore);

    }
  }

  def mapper(index: Int, result: OneStepResult, gridIndexer: GridIndexer, lvl: Int, base: Int): (Int, OneStepResult) = {
    val (nodeI, nodeJ) = ((index - 1) % width(lvl - 1, base: Int, gridIndexer), ((index - 1) / width(lvl - 1, base: Int, gridIndexer).asInstanceOf[Double]).toInt)
    ((nodeI / base).toInt + (nodeJ / base).toInt * width(lvl, base: Int, gridIndexer) + 1, result)
  }

  def reducer(index: Int, results: Iterable[OneStepResult], gridIndexer: GridIndexer, lvl: Int, base: Int, topK: Int): (Int, OneStepResult) = {
    var preSafe = 0
    var preUnsafe = 0
    val dependencyGraph = new DependencyGraph(gridIndexer)
    results.foreach(x => {
      preSafe += x.countSafe
      preUnsafe += x.countUnsafe
    })
    val I = ((index - 1) % width(lvl, base: Int, gridIndexer))
    val J = (((index - 1) / (width(lvl, base: Int, gridIndexer)).asInstanceOf[Double]).toInt)
    val cornerALong = I * math.pow(base, lvl).toInt * gridIndexer.gridSizePerCell
    val cornerALat = J * math.pow(base, lvl).toInt * gridIndexer.gridSizePerCell
    val cornerBLong = cornerALong + math.pow(base, lvl).toInt * gridIndexer.gridSizePerCell - 1
    val cornerBLat = cornerALat + math.pow(base, lvl).toInt * gridIndexer.gridSizePerCell - 1
    var candidates = new ListBuffer[SpatialObject]
    results.foreach(x => candidates.addAll(x.spatialObjects))
    candidates = candidates.sortBy(_.getScore).reverse
    var pos = 0
    var unsafe = 0
    while (dependencyGraph.safeRegionCnt < topK && pos < candidates.size) {
      val instance = candidates.get(pos)
      val con = dependencyGraph.overlapCon(instance);
      val (cellI, cellJ) = gridIndexer.getCellIndex(instance.getGeometry.getCoordinates.toList(1).x.toFloat
        , instance.getGeometry.getCoordinates.toList(1).y.toFloat)
      if (con == 0 && !(cellI == cornerALong || cellI == cornerBLong || cellJ == cornerALat || cellJ == cornerBLat))
        dependencyGraph.addSafeRegion(instance)
      else if (con == 1) {
        val a = 0
      }
      else if (con == 2 || (cellI == cornerALong || cellI == cornerBLong || cellJ == cornerALat || cellJ == cornerBLat)) {
        dependencyGraph.addUnsafeRegion(instance);
        unsafe += 1
        if (dependencyGraph.IsDependencyIncluded(instance)) {
          // Do not add Safe
          // Do not add M
          var a = 0
        } else {
          dependencyGraph.increaseSafeCNT();
          dependencyGraph.addM(instance);
        }
      }
      pos += 1
    }
    (index, new OneStepResult(preSafe, preUnsafe, index, 0, dependencyGraph.getFinalResult()))
  }

  def roundUp(d: Double) = math.ceil(d).toInt

  def width(lvl: Int, base: Int, gridIndexer: GridIndexer): Int = {
    var width = gridIndexer.width
    for (i <- 1 to lvl)
      width = roundUp(width / base.asInstanceOf[Double])
    return width
  }

  /*1:-73.9737:40.6832     1419.0
  2:-2.1716:43.0514     657.0
  3:-91.62530000000001:35.7761     544.0
  4:-118.32775:33.996449999999996     481.0
  5:-2.17075:43.05155     474.0
  6:119.5762:23.5757     448.0
  7:-83.4927:8.6829     434.0
  8:5.1959:51.581     398.0
  9:4.82625:45.837450000000004     379.0
  10:-122.4481:37.7903     371.0
  11:-84.54589999999999:42.7348     366.0
  12:139.51774999999998:35.62525     365.0
  13:-3.53575:39.46925     365.0
  14:-91.6161:35.7929     361.0
  15:-91.62620000000001:35.77735     360.0
  16:-71.60275:42.57355     325.0
  17:-73.9633:40.77935     299.0
  18:119.58170000000001:23.569499999999998     277.0
  19:-85.8514:32.9258     261.0
  20:-118.2952:34.0831     260.0
  21:4.3652:50.8549     256.0
  22:-122.68469999999999:45.511300000000006     253.0
  23:-83.7514:42.2826     239.0
  24:-95.995:36.152550000000005     236.0
  25:2.2943499999999997:48.85835     231.0
  26:-93.91745:35.30825     229.0
  27:2.17435:41.403549999999996     225.0
  28:-79.8411:9.162     224.0
  29:-77.02099999999999:38.89815     220.0
  30:-106.4882:31.76005     220.0
  31:-122.66315:45.520250000000004     218.0
  32:-85.1506:42.34195     215.0
  33:-79.8335:9.1518     214.0
  34:4.348800000000001:50.8473     212.0
  35:-51.1908:-30.015     211.0
  36:-1.15185:52.95125     209.0
  37:-95.8677:36.070800000000006     206.0
  38:-92.4653:34.81185     202.0
  39:6.2127:46.4068     201.0
  40:-0.1271:51.51935     200.0
  41:-79.84129999999999:9.16725     192.0
  42:-91.6214:35.7734     192.0
  43:-79.39455000000001:43.663650000000004     185.0
  44:-73.8874:40.9671     185.0
  45:120.6956:24.198     175.0
  46:-77.2403:38.8122     174.0
  47:119.681:23.579349999999998     172.0
  48:115.763:-32.3822     172.0
  49:-71.65365:42.10665     170.0
  50:-84.38505:33.76175     166.0
  51:-93.3529:44.8617     166.0
  52:-96.35065:30.610599999999998     165.0
  53:-96.8272:32.8013     164.0
  54:-89.4614:30.9126     163.0
  55:-79.8442:9.1595     163.0
  56:-8.1973:39.4617     163.0
  57:-3.6068:39.460300000000004     162.0
  58:126.9836:37.53405     160.0
  59:-79.92085:32.85625     158.0
  60:-122.46625:37.76985     157.0
  61:-118.3266:33.9975     151.0
  62:-106.4891:31.7614     149.0
  63:-79.831:9.1559     148.0
  64:-73.9856:40.74855     148.0
  65:-106.4893:31.7622     146.0
  66:-79.8405:9.1606     144.0
  67:-2.4918:53.73235     143.0
  68:-0.128:51.50795     143.0
  69:-122.42275000000001:37.826750000000004     142.0
  70:-0.64685:53.5729     142.0
  71:139.7714:35.7174     142.0
  72:-91.6259:35.77515     141.0
  73:-73.97720000000001:40.761250000000004     140.0
  74:-82.535:35.1312     139.0
  75:2.33595:48.86095     139.0
  76:-0.1272:51.5065     137.0
  77:-3.18185:55.94125     136.0
  78:-43.2429:-22.9137     136.0
  79:-61.4627:10.2646     134.0
  80:-38.0487:-12.0179     134.0
  81:-118.0967:33.8854     134.0
  82:2.34125:48.857150000000004     133.0
  83:-95.92805:41.225     131.0
  84:145.5335:-37.949     130.0
  85:115.8913:-31.9993     128.0
  86:2.29505:48.873850000000004     128.0
  87:-91.62665000000001:35.77405     127.0
  88:-3.70385:40.41685     125.0
  89:-122.43485000000001:37.76075     124.0
  90:-77.04025:38.89275     124.0
  91:-155.2312:19.4351     124.0
  92:-71.46365:43.3586     124.0
  93:-0.1195:51.50345     123.0
  94:-3.53195:39.46785     123.0
  95:-49.959050000000005:-20.4207     123.0
  96:-122.41805:37.77945     123.0
  97:6.119199999999999:46.1676     122.0
  98:-119.23670000000001:40.75495     122.0
  99:-77.02879999999999:38.898849999999996     122.0
  100:12.4922:41.89035     120.0
  101:-79.9163:32.856449999999995     120.0
  102:-94.57894999999999:39.0159     119.0
  103:2.29415:48.84415     119.0
  104:2.34915:48.85325     119.0
  105:100.0642:9.5261     118.0
  106:-81.58135:28.4188     118.0
  107:-77.11080000000001:38.87925     117.0
  108:4.352399999999999:50.84685     117.0
  109:-91.6271:35.7778     117.0
  110:-87.62315000000001:41.88275     117.0
  111:-3.52355:39.4667     117.0
  112:-46.62965:-23.6433     115.0
  113:-2.171:43.05     114.0
  114:-84.5153:39.101     113.0
  115:-74.2188:40.8154     113.0
  116:23.9866:38.0833     112.0
  117:23.644:38.4793     112.0
  118:-76.9061:34.8836     111.0
  119:-3.2034:51.473150000000004     110.0
  120:-58.517799999999994:-34.58285     110.0
  121:-122.33179999999999:47.59525     110.0
  122:-122.02924999999999:36.97405     110.0
  123:-121.90185:36.61815     110.0
  124:-122.40105:37.78575     109.0
  125:9.567:54.49125     109.0
  126:119.56299999999999:23.5685     109.0
  127:-77.02345:38.918     108.0
  128:-71.60294999999999:42.57065     107.0
  129:121.20035:24.842550000000003     105.0
  130:-71.1199:42.37395     105.0
  131:-73.97954999999999:40.75915     104.0
  132:-83.43455:42.34465     104.0
  133:-0.7953:51.3681     103.0
  134:-74.0025:40.75795     102.0
  135:135.1769:34.1535     101.0
  136:-77.4046:37.5223     101.0
  137:-77.01974999999999:38.88835     101.0
  138:2.34965:48.853049999999996     101.0
  139:114.1169:-21.92385     99.0
  140:-73.9865:40.75635     99.0
  141:15.5794:49.149100000000004     99.0
  142:-74.00735:40.7147     99.0
  143:-9.4212:38.8153     98.0
  144:-2.1725:43.0503     97.0
  145:-122.3493:47.62055     97.0
  146:6.9389:46.9921     97.0
  147:-97.4474:35.2207     96.0
  148:-2.2323500000000003:53.4644     96.0
  149:-122.40755:37.78805     95.0
  150:115.8884:-32.0001     95.0
  151:-51.2203:-30.0385     94.0
  152:-117.16065:32.70575     94.0
  153:35.8228:33.1059     93.0
  154:-117.1617:32.706450000000004     92.0
  155:-84.5478:42.73355     91.0
  156:-122.46005:37.77245     91.0
  157:2.62265:48.855850000000004     91.0
  158:13.376999999999999:52.51625     91.0
  159:-77.04585:38.86735     91.0
  160:-117.16149999999999:32.71585     91.0
  161:-64.1877:-31.4096     90.0
  162:-82.8192:41.6636     90.0
  163:-97.84100000000001:30.146050000000002     90.0
  164:-3.70585:40.4202     90.0
  165:-89.45945:30.9125     90.0
  166:-118.4961:34.01565     90.0
  167:2.495:48.8153     90.0
  168:-0.4738:50.82815     89.0
  169:-46.6834:-23.5413     89.0
  170:5.1046:52.32     88.0
  171:4.349600000000001:50.84845     87.0
  172:-79.38915:43.64145     87.0
  173:-0.10894999999999999:51.55495     87.0
  174:-90.4501:14.5413     87.0
  175:-71.55314999999999:42.69455     87.0
  176:10.753499999999999:59.9098     87.0
  177:-77.02605:38.89125     87.0
  178:-85.8218:38.284     86.0
  179:-0.1283:51.50855     86.0
  180:8.7095:50.5425     86.0
  181:-122.4014:37.78415     86.0
  182:-122.34055000000001:47.60865     85.0
  183:2.3840500000000002:48.843450000000004     85.0
  184:-118.24515:34.05325     85.0
  185:2.2948500000000003:48.85825     84.0
  186:-122.3896:37.7784     84.0
  187:-117.91905:33.81235     84.0
  188:-118.4039:33.8659     84.0
  189:30.3833:59.91785     84.0
  190:120.22285:23.10385     83.0
  191:6.8458:47.1135     83.0
  192:-0.09939999999999999:51.50775     83.0
  193:149.08325000000002:-35.26365     83.0
  194:-118.4469:34.07040000000001     83.0
  195:2.16495:41.39175     83.0
  196:-0.0753:51.50565     82.0
  197:115.7621:-32.3828     82.0
  198:21.012:52.22985     82.0
  199:-77.01304999999999:38.8881     82.0
  200:-4.02515:39.862700000000004     82.0
  201:-0.07619999999999999:51.50815     82.0
  202:2.1698500000000003:41.38705     82.0
  203:-6.258850000000001:53.34755     81.0
  204:-118.2186:34.066     81.0
  205:0.0493:40.0507     81.0
  206:-118.27035000000001:34.04025     81.0
  207:28.9799:41.008449999999996     81.0
  208:2.17525:41.37995     81.0
  209:-79.38045:43.6562     81.0
  210:12.339:45.43435     80.0
  211:-71.09715:42.346450000000004     80.0
  212:2.1618500000000003:41.39535     80.0
  213:-1.5165:53.8396     79.0
  214:2.1698500000000003:41.38595     79.0
  215:-73.95875000000001:40.71355     79.0
  216:-83.4355:42.344800000000006     78.0
  217:-74.01135:40.70935     78.0
  218:-116.64920000000001:33.20035     78.0
  219:-73.71594999999999:40.651700000000005     78.0
  220:139.40155:35.651250000000005     78.0
  221:-122.40594999999999:37.80265     78.0
  222:-73.99355:40.75065     78.0
  223:-73.96275:40.77915     77.0
  224:-118.4918:34.0203     77.0
  225:-73.97864999999999:40.75875     77.0
  226:-73.9736:40.78085     77.0
  227:-41.7748:-2.9144     76.0
  228:-85.65969999999999:43.040499999999994     76.0
  229:-4.0238:39.85725     76.0
  230:12.4769:41.898849999999996     76.0
  231:-0.2307:51.5258     76.0
  232:10.0053:45.5755     76.0
  233:-3.70335:40.41695     76.0
  234:12.3396:45.43355     76.0
  235:-73.98585:40.75785     76.0
  236:-77.03545:38.88965     76.0
  237:12.4571:41.90235     75.0
  238:138.78654999999998:35.02405     75.0
  239:12.4832:41.90105     75.0
  240:-79.5597:43.561     75.0
  241:-74.04464999999999:40.68925     74.0
  242:11.2555:43.77305     74.0
  243:-122.4128:37.77105     74.0
  244:4.883800000000001:52.36225     73.0
  245:-83.04825:42.327600000000004     73.0
  246:121.2341:24.8695     73.0
  247:-77.2424:38.81395     73.0
  248:-117.91895:33.80935     73.0
  249:-2.23635:53.4844     73.0
  250:121.5623:25.034     72.0
  251:2.4431:48.6251     72.0
  252:-0.1345:51.51005     72.0
  253:-76.5987:39.2615     72.0
  254:-77.11115000000001:38.87575     72.0
  255:-122.39474999999999:37.79485     72.0
  256:-122.16104999999999:37.43455     71.0
  257:-0.1265:51.51905     71.0
  258:-74.006:40.71445     71.0
  259:4.37975:50.6758     71.0
  260:115.6386:-33.369     71.0
  261:-79.6523:-3.6738     71.0
  262:-51.21365:-30.0601     71.0
  263:-118.3088:34.0894     71.0
  264:-76.5902:40.1644     71.0
  265:12.4534:41.90215     71.0
  266:139.4416:36.0584     70.0
  267:-96.9402:31.5673     70.0
  268:6.9427:50.9173     70.0
  269:-117.16135:32.70585     70.0
  270:-117.1627:32.7074     70.0
  271:-82.73:35.2371     70.0
  272:-82.8012:27.9677     70.0
  273:12.607:55.65975     70.0
  274:2.34315:48.886449999999996     69.0
  275:-73.92805:40.82715     69.0
  276:-118.2689:34.04375     69.0
  277:-3.5334:39.46835     69.0
  278:-1.7157499999999999:52.4507     69.0
  279:-84.42545:39.15535     69.0
  280:12.4958:41.90305     69.0
  281:-122.41895:37.77915     69.0
  282:-2.8841:40.68815     69.0
  283:2.3405500000000004:48.85745     68.0
  284:-120.6755:35.2683     68.0
  285:16.365099999999998:48.210049999999995     68.0
  286:-122.40639999999999:37.78605     68.0
  287:4.893000000000001:52.37285     68.0
  288:121.4519:31.23095     67.0
  289:-83.7373:42.2742     67.0
  290:114.20779999999999:22.3915     67.0
  291:-122.46860000000001:37.77155     67.0
  292:-98.5283:29.5939     67.0
  293:-122.435:37.76205     67.0
  294:-73.914:40.9028     67.0
  295:-77.02170000000001:38.90075     67.0
  296:2.3366499999999997:48.86085     67.0
  297:-77.4444:38.91115     67.0
  298:-87.5695:44.14345     67.0
  299:120.6766:24.13645     66.0
  300:11.2568:43.773250000000004     66.0
  */
}